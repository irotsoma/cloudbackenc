/*
 * Copyright (C) 2016  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

buildscript {
    ext.springBootVersion = '1.4.0.RELEASE'
    ext.tornadofxVersion = '1.5.4'
    ext.junitVersion = '4.12'
    ext.log4jVersion = '2.6.2'
    ext.kotlin_version = '1.0.3'
    ext.kotlinVersion = '1.0.3'

    ext.localMavenRepository = "$rootDir/../maven-repository"
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.liquibase:liquibase-gradle-plugin:1.2.1"    }

}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}
subprojects {
    group 'com.irotsoma.cloudbackenc'
    version '0.1-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'kotlin'

    repositories {
        mavenCentral()
    }
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.apache.logging.log4j:log4j-1.2-api:$log4jVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        testCompile "junit:junit:$junitVersion"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    //this section downloads some reports regarding the licenses of various dependencies and includes them in the
    // META-INF/licenses folder
    apply plugin: 'com.github.hierynomus.license'
    license {
        ignoreFailures true
        mapping ('kt', 'JAVADOC_STYLE')
        excludes(['**/*.json', '**/*.properties', '**/LICENSE', '**/*license*.html', '**/*license*.xml'])
    }
    task copyLicenseReports(type: Copy){
        from "$buildDir/reports/license/"
        into "$buildDir/license-reports/META-INF/licenses"
    }
    assemble.dependsOn 'downloadLicenses'
    assemble.dependsOn 'copyLicenseReports'
    copyLicenseReports.mustRunAfter 'downloadLicenses'
}

project(':common'){
    apply plugin: 'maven-publish'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom.withXml {
                    def root = asNode()
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'GNU Lesser General Public License, Version 3.0')
                    license.appendNode('url', 'http://www.gnu.org/licenses/lgpl.txt')
                    license.appendNode('distribution', 'repo')
                }
            }
        }
        repositories {
            maven {
                url localMavenRepository
            }
        }
    }
}

project(':cloudservice'){
    apply plugin: 'maven-publish'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom.withXml {
                    def root = asNode()
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'GNU Lesser General Public License, Version 3.0')
                    license.appendNode('url', 'http://www.gnu.org/licenses/lgpl.txt')
                    license.appendNode('distribution', 'repo')
                }
            }
        }
        repositories {
            maven {
                url localMavenRepository
            }
        }
    }
}

project(':encryptionservice'){
    apply plugin: 'maven-publish'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom.withXml {
                    def root = asNode()
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'GNU Lesser General Public License, Version 3.0')
                    license.appendNode('url', 'http://www.gnu.org/licenses/lgpl.txt')
                    license.appendNode('distribution', 'repo')
                }
            }
        }
        repositories {
            maven {
                url localMavenRepository
            }
        }
    }
}

project(':centralcontroller'){
    apply plugin: 'spring-boot'
    apply plugin: 'propdeps'
    apply plugin: 'org.liquibase.gradle'

    dependencies {
        //spring boot
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-logging'
        compile 'org.springframework.boot:spring-boot-starter-security'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        optional 'org.springframework.boot:spring-boot-devtools'
        optional 'org.springframework.boot:spring-boot-configuration-processor'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        //cloud service interfaces
        compile project(':cloudservice')
        //encryption service interfaces
        compile project(':encryptionservice')
        //common classes
        compile project(':common')
        //jackson
        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'com.fasterxml.jackson.core:jackson-core'
        compile 'com.fasterxml.jackson.core:jackson-databind'
        compile 'com.fasterxml.jackson.core:jackson-annotations'
        //h2
        compile 'com.h2database:h2'
        //liquibase
        compile 'org.liquibase:liquibase-core'
    }
    compileJava.dependsOn(processResources)

    processResources {
        expand(project.properties)
    }

    springBoot {
        executable = true
    }
}
project(':cloudbackencui'){
    apply plugin: 'spring-boot'
    dependencies {
        //spring
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-logging'
        //jackson
        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'com.fasterxml.jackson.core:jackson-databind'
        compile 'com.fasterxml.jackson.core:jackson-annotations'
        //cloud service interfaces
        compile project(':cloudservice')
        compile project(':common')
        //tornadofx
        compile "no.tornado:tornadofx:$tornadofxVersion"
        //test
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

}

