/*
 * Copyright (C) 2016  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
buildscript {
    ext.springBootVersion = '1.4.0.RELEASE'
    ext.tornadofxVersion = '1.5.6'
    ext.junitVersion = '4.12'
    ext.log4jVersion = '2.6.2'
    ext.kotlin_version = '1.0.3'
    ext.kotlinVersion = '1.0.4'

    ext.localMavenRepository = "file://$rootDir/../maven-repository"
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.liquibase:liquibase-gradle-plugin:1.2.1"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.9"}

}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

def secretDir = "$rootDir/secret/"

subprojects {
    group 'com.irotsoma.cloudbackenc'
    version '0.2-SNAPSHOT'
    description 'test'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'
    signing {
        sign configurations.archives
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.apache.logging.log4j:log4j-1.2-api:$log4jVersion"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        testCompile "junit:junit:$junitVersion"
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    //this section downloads some reports regarding the licenses of various dependencies and includes them in the
    // META-INF/licenses folder
    apply plugin: 'com.github.hierynomus.license'
    license {
        ignoreFailures true
        mapping('kt', 'JAVADOC_STYLE')
        excludes(['**/*.json', '**/*.properties', '**/LICENSE', '**/*license*.html', '**/*license*.xml', '**COPYING', '**COPYING.LESSER'])
    }
    task copyLicenseReports(type: Copy) {
        from "$buildDir/reports/license/"
        into "$buildDir/license-reports/META-INF/licenses"
    }
    assemble.dependsOn 'downloadLicenses'
    assemble.dependsOn 'copyLicenseReports'
    copyLicenseReports.mustRunAfter 'downloadLicenses'

    //javadoc stuff for Kotlin
    dokka {
        moduleName = 'data'
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/docs/javadoc"
        linkMapping {
            dir = "src/main/kotlin"
            url = "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin"
            suffix = "#L"
        }
        sourceDirs = files('src/main/kotlin')
    }
    task javadocJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka.outputDirectory
    }
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

//    configurations {
//        archives
//        pom
//    }
//    ext {
//        pomFilePath = "$buildDir/tmp/pom.xml"
//        pomFile = file(pomFilePath)
//    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
//        if (pomFile.exists()) {
//            pom pomFile
//        }
    }
//    task signJars(type: Sign, dependsOn: [jar, javadocJar, sourceJar]) {
//        sign configurations.archives
//    }
//    task signPom(type: Sign) {
//        sign configurations.pom
//    }
//    ext.getSignatureFiles = {
//        def allFiles = project.tasks.signJars.signatureFiles.collect { it }
//        def signedSources = allFiles.find { it.name.contains('-sources') }
//        def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
//        def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
//        return [
//                [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
//                [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
//                [archive: signedJar, classifier: null, extension: 'jar.asc']
//        ]
//    }
//    ext.getPomSignature = {
//        return project.tasks.signPom.signatureFiles.collect { it }[0]
//    }
//    if (project.ext.pomFile.exists()) {
//        task preparePublication(dependsOn: [signJars, signPom])
//    } else {
//        task preparePublication(dependsOn: signJars)
//    }
    repositories {
        maven {
            url localMavenRepository
        }
    }
}

project(':common') {
    apply plugin: 'maven'


    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom {
                    project {
                        groupId project.group
                        artifactId project.name
                        version project.version

                        name 'CloudBackEnc Common'
                        description 'Common library for CloudBackEnc.'
                        url 'https://irotsoma.github.io/cloudbackenc/'
                        licenses{
                            license{
                                name 'GNU Lesser General Public License, Version 3.0'
                                url 'http://www.gnu.org/licenses/lgpl.txt'
                                distribution 'repo'
                            }
                        }
                        developers{
                            developer{
                                id 'irotsoma'
                                name 'Justin Zak'
                                email 'irotsomadev@gmail.com'
                                organization = 'Irotsoma, LLC'
                                organizationUrl 'https://www.irotsoma.com'
                            }
                        }
                        scm{
                            connection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            developerConnection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            url 'git@github.com:irotsoma/cloudbackenc.git'
                        }
                    }
                }
            }
        }
    }
}

project(':cloudservice'){
    apply plugin: 'maven'

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom {
                    project {
                        groupId project.group
                        artifactId project.name
                        version project.version

                        name 'CloudBackEnc Cloud Service Interfaces'
                        description 'Cloud service interface library for CloudBackEnc extensions.'
                        url 'https://irotsoma.github.io/cloudbackenc/'
                        licenses{
                            license{
                                name 'GNU Lesser General Public License, Version 3.0'
                                url 'http://www.gnu.org/licenses/lgpl.txt'
                                distribution 'repo'
                            }
                        }
                        developers{
                            developer{
                                id 'irotsoma'
                                name 'Justin Zak'
                                email 'irotsomadev@gmail.com'
                                organization = 'Irotsoma, LLC'
                                organizationUrl 'https://www.irotsoma.com'
                            }
                        }
                        scm{
                            connection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            developerConnection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            url 'git@github.com:irotsoma/cloudbackenc.git'
                        }
                    }
                }
            }
        }
    }

}

project(':encryptionservice'){

    apply plugin: 'maven'

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom {
                    project {
                        groupId project.group
                        artifactId project.name
                        version project.version

                        name 'CloudBackEnc Encryption Interfaces'
                        description 'Encryption service interface library for CloudBackEnc extensions.'
                        url 'https://irotsoma.github.io/cloudbackenc/'
                        licenses{
                            license{
                                name 'GNU Lesser General Public License, Version 3.0'
                                url 'http://www.gnu.org/licenses/lgpl.txt'
                                distribution 'repo'
                            }
                        }
                        developers{
                            developer{
                                id 'irotsoma'
                                name 'Justin Zak'
                                email 'irotsomadev@gmail.com'
                                organization = 'Irotsoma, LLC'
                                organizationUrl 'https://www.irotsoma.com'
                            }
                        }
                        scm{
                            connection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            developerConnection 'scm:git:git@github.com:irotsoma/cloudbackenc.git'
                            url 'git@github.com:irotsoma/cloudbackenc.git'
                        }
                    }
                }
            }
        }
    }
}

project(':centralcontroller'){
    apply plugin: 'spring-boot'
    apply plugin: 'propdeps'
    apply plugin: 'org.liquibase.gradle'

    dependencies {
        //spring boot
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-logging'
        compile 'org.springframework.boot:spring-boot-starter-security'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        optional 'org.springframework.boot:spring-boot-devtools'
        optional 'org.springframework.boot:spring-boot-configuration-processor'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        //cloud service interfaces
        compile project(':cloudservice')
        //encryption service interfaces
        compile project(':encryptionservice')
        //common classes
        compile project(':common')
        //jackson
        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'com.fasterxml.jackson.core:jackson-core'
        compile 'com.fasterxml.jackson.core:jackson-databind'
        compile 'com.fasterxml.jackson.core:jackson-annotations'
        //h2
        compile 'com.h2database:h2'
        //liquibase
        compile 'org.liquibase:liquibase-core'
    }
    compileJava.dependsOn(processResources)

    processResources {
        expand(project.properties)
    }

    springBoot {
        executable = true
    }
}
project(':cloudbackencui'){
    apply plugin: 'spring-boot'
    dependencies {
        //spring
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-logging'
        //jackson
        compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
        compile 'com.fasterxml.jackson.core:jackson-databind'
        compile 'com.fasterxml.jackson.core:jackson-annotations'
        //cloud service interfaces
        compile project(':cloudservice')
        compile project(':common')
        //tornadofx
        compile "no.tornado:tornadofx:$tornadofxVersion"
        //test
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }

}